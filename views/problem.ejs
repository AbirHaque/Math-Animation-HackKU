<html>
    <head>
        <link rel="stylesheet" href="/css/problem.css" >
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    
    </head>
    <body>
        <p id="problemStatement"></p>
        <div id="entityCanvas">
            <div class="entity" id="entity1">
                <div class="person">
                    <img src="/images/naruto.png" class="personImage">
                </div>
                <div class="basket" id="basket1"></div>

            </div>
            <div class="entity" id="entity2">
                <div class="person">
                    <img src="/images/goku.png" class="personImage">
                </div>
                <div class="basket" id="basket2"></div>
            </div>
        </div>

        <div id="entityCanvasMD">
            <div class="entity" id="noteEntity1">
                <div class="person">
                    <img src="/images/naruto.png" class="personImage">
                </div>
                <div class="basket" id="noteBasket1"></div>
            </div>
            <div class="noteEntity" id="noteEntity">
            </div>
        </div>

        <div class="col text-center" style="margin-top:20px">
            
            <input type="text" id="answer" style="margin-top:20px">
            <button type="button" class="btn btn-primary" id="submitButton">Submit</button>
            <button class="btn btn-info" id="hintButton">Hint?</button>
            <b id="result" ></b>
    <br>
         </div>
        <button type="button" class="btn btn-primary btn-lg btn-block" style="margin-top:20px;" onclick="location.href = '/student';">Problem list</button>
        <button type="button" class="btn btn-primary btn-lg btn-block" onclick="location.href = '/';">Home</button>
    </body>
    <script type="module">
        import anime from '/js/anime.es.js';
        var variable = "<%= variable %>";
        var val1 = "<%= operation.val1 %>"
        var val2 = "<%= operation.val2 %>"
        var operator = "<%= operation.operator %>"
        const xShift = 60
        const yShift = 60
        function check()
        {
            let answer = eval(val1+operator+val2).toString();//Probably no so very safe
            if (answer ===document.getElementById("answer").value)
            {
                document.getElementById("result").innerHTML = "Correct"
                document.getElementById("result").style.color = "green"
            }
            else{                
                document.getElementById("result").innerHTML = "Incorrect"
                document.getElementById("result").style.color = "red"
            }
        }
        const startHint = () => {
            if(operator === "+"){
                additionAnimation()
            }
            else if(operator === "-"){
                subtractionAnimation()
            }
            else if(operator === "*"){
                multiplicationAnimation()
            }
            document.getElementById("hintButton").removeEventListener('click',startHint);
        }
        const generateProblemStatement = (val1,val2,operator,variable) => {
            let partOne = `Rahul has ${val1} ${variable}, Abir has ${val2} ${variable}. `;
            let partOnepartTwo = `Abir has ${val1} ${variable}. ` ;
            let partOnepartThree = `Rahul has ${val1} ${variable} which cost $${val2} each. ` ;
            let partOnepartFour = `${val1} ${variable} cost ${val2}. ` ;
            let partTwo;
            let problemStatement;
            if(operator === "+"){
                partTwo = `How many ${variable} do they have together?`;
                problemStatement = partOne + partTwo;
            }
            else if(operator === "-"){
                partTwo = `How many ${variable} does Abir have left if he gives Rahul ${val2} ${variable}?`;
                problemStatement = partOnepartTwo + partTwo;
            }
            else if(operator === "*"){
                partTwo = `How much does ${val1} ${variable} cost?`;
                problemStatement = partOnepartThree + partTwo;
            }
            else if(operator === "/"){
                partTwo = `How much does each ${variable} cost?`;
                problemStatement = partOnepartFour + partTwo;
            }
            return problemStatement;
        }
        const addVariabletoEntity = (val, entity, index) => {
            for(let i=0; i < val; i++){
                let element = document.createElement('div')
                
                element.classList.add('circle');
                element.setAttribute("id",`circle${i}_${index}`);
                entity.appendChild(
                    element
                );
            }
        }
        const submitAnswer = () => {
            let answer = eval(`${val1}${operator}${val2}`);
        }
        
        const additionAnimation = () =>{
            let entity2Pos = entity2.getBoundingClientRect();
            var tl = anime.timeline({
                    easing: 'easeOutExpo',
                    duration: 750
                    });
            for(let i = basket1.children.length-1; i >= 0; i--){
                let variableElement = document.getElementById(`circle${i}_1`)
                let variablePos = variableElement.getBoundingClientRect()
                let element = document.createElement('div');
                element.classList.add('circle');
                element.style.opacity = 0;
                element.setAttribute("id",`circle${basket2.children.length}_2`);
                basket2.appendChild(
                    element
                );
                const {x,y} = element.getBoundingClientRect()
                console.log(x,y)
                let translateY = y - variablePos.y
                let translateX = x - variablePos.x
                tl.add({
                    targets: variableElement,
                    translateX: translateX,
                    translateY: translateY,
                    complete: function(anim){
                        element.style.opacity = 1;
                        variableElement.remove();}
                })
                
            }           
        }
        const subtractionAnimation = () => {
            let entity2Pos = entity2.getBoundingClientRect();
            var tl = anime.timeline({
                    easing: 'easeOutExpo',
                    duration: 750
                    });
            for(let i = val1-1; i >= val1-val2; i--){
                let variableElement = document.getElementById(`circle${i}_1`)
                let variablePos = variableElement.getBoundingClientRect()
                let element = document.createElement('div');
                element.classList.add('circle');
                element.style.opacity = 0;
                if(i==val1-1) element.setAttribute("id",`circle0_2`);
                else element.setAttribute("id",`circle${basket2.children.length}_2`);
                
                basket2.appendChild(
                    element
                );
                console.log(element)
                const {x,y} = element.getBoundingClientRect()
                console.log(x,y)
                let translateY = y - variablePos.y
                let translateX = x - variablePos.x
                tl.add({
                    targets: variableElement,
                    translateX: translateX,
                    translateY: translateY,
                    complete: function(anim){
                        element.style.opacity = 1;
                        variableElement.remove();}
                })
                
            }  
        }
        const multiplicationAnimation = () => {
    
            var tl = anime.timeline({
                    easing: 'easeOutExpo',
                    duration: 750
                    });
            for (let i=0; i<basket1.children.length;i++){
                let variableElement = document.getElementById(`circle${val1-i-1}_1`)
                let variablePos = variableElement.getBoundingClientRect();
                let noteValuePair = document.createElement("div");
                noteValuePair.classList.add("noteValuePair");
                let noteRegion = document.createElement("noteRegion");
                noteRegion.classList.add("noteRegion")
                let valueRegion = document.createElement("valueRegion");
                valueRegion.classList.add("valueRegion")
                let noteEntity = document.getElementById("noteEntity");
                let elementNote = document.createElement("div")
                elementNote.classList.add("circle")
                elementNote.setAttribute("id",`circle${i}_2`)
                elementNote.style.opacity = 0;
                
                noteEntity.appendChild(noteValuePair);
                noteValuePair.appendChild(noteRegion);
                noteValuePair.appendChild(valueRegion);
                let elementValue = document.createElement("div");
                elementValue.classList.add("bankNote");
                elementValue.innerText = "$" + val2;
                elementValue.style.opacity = 0;
                valueRegion.appendChild(elementValue);
                noteRegion.appendChild(elementNote);
                let {x,y} = elementNote.getBoundingClientRect();
                let translateX = x - variablePos.x;
                let translateY = y - variablePos.y;
                
                console.log(x,y)
                tl.add({
                    targets: variableElement,
                    translateX: translateX,
                    translateY:translateY,
                    complete: function(anim){
                        elementNote.style.opacity = 1;
                        elementValue.style.opacity = 1;
                        variableElement.remove();
                    }
                })
            }
        }
        
        const intializeEntities = () => {
            if(operator === "+"){
                document.getElementById("entityCanvas").style.display = "block";
                addVariabletoEntity(val1,basket1,1);
                addVariabletoEntity(val2,basket2,2);
            }
            else if(operator === "-"){
                document.getElementById("entityCanvas").style.display = "block";
                addVariabletoEntity(val1,basket1,1);
            }
            else if(operator === "*"){
                document.getElementById("entityCanvasMD").style.display = "block";
                addVariabletoEntity(val1,basket1,1);
            }
        }
        var problemStatement = generateProblemStatement(val1,val2,operator,variable)
        
        document.getElementById("problemStatement").innerHTML = problemStatement;
        document.getElementById("hintButton").addEventListener("click",startHint,false);
        document.getElementById("submitButton").addEventListener("click",check,false);
        
        var entity1,entity2,basket1,basket2;
        if(operator === "*") entity1 = document.getElementById("noteEntity1");
        entity2 = document.getElementById("entity2");
        if(operator==="*") basket1 = document.getElementById("noteBasket1");
        else basket1 = document.getElementById("basket1");
        basket2 = document.getElementById("basket2");
        intializeEntities();
        
    </script>
</html>